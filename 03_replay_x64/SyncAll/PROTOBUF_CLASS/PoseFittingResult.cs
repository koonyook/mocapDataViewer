// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PoseFittingResult.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.PoseFitting {

  /// <summary>Holder for reflection information generated from PoseFittingResult.proto</summary>
  public static partial class PoseFittingResultReflection {

    #region Descriptor
    /// <summary>File descriptor for PoseFittingResult.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PoseFittingResultReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdQb3NlRml0dGluZ1Jlc3VsdC5wcm90bxILcG9zZUZpdHRpbmcijAEKCkZy",
            "YW1lUHJvdG8SDQoFa1RpbWUYASABKAESDAoEdHJhbhgCIAMoAhIMCgRwb3Nl",
            "GAMgAygCEhUKDWpvaW50UG9zaXRpb24YBCADKAISDAoEY29zdBgFIAEoAhIZ",
            "ChF3aW5uZXJUaHJlYWRJbmRleBgGIAEoBRITCgtwb3NlQ29tcGFjdBgHIAMo",
            "AiJFCgxTZXNzaW9uUHJvdG8SDAoEYmV0YRgBIAMoAhInCgZmcmFtZXMYAiAD",
            "KAsyFy5wb3NlRml0dGluZy5GcmFtZVByb3RvQh6qAhtHb29nbGUuUHJvdG9i",
            "dWYuUG9zZUZpdHRpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PoseFitting.FrameProto), global::Google.Protobuf.PoseFitting.FrameProto.Parser, new[]{ "KTime", "Tran", "Pose", "JointPosition", "Cost", "WinnerThreadIndex", "PoseCompact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.PoseFitting.SessionProto), global::Google.Protobuf.PoseFitting.SessionProto.Parser, new[]{ "Beta", "Frames" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FrameProto : pb::IMessage<FrameProto> {
    private static readonly pb::MessageParser<FrameProto> _parser = new pb::MessageParser<FrameProto>(() => new FrameProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.PoseFitting.PoseFittingResultReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameProto(FrameProto other) : this() {
      kTime_ = other.kTime_;
      tran_ = other.tran_.Clone();
      pose_ = other.pose_.Clone();
      jointPosition_ = other.jointPosition_.Clone();
      cost_ = other.cost_;
      winnerThreadIndex_ = other.winnerThreadIndex_;
      poseCompact_ = other.poseCompact_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameProto Clone() {
      return new FrameProto(this);
    }

    /// <summary>Field number for the "kTime" field.</summary>
    public const int KTimeFieldNumber = 1;
    private double kTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double KTime {
      get { return kTime_; }
      set {
        kTime_ = value;
      }
    }

    /// <summary>Field number for the "tran" field.</summary>
    public const int TranFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_tran_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> tran_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///[3]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Tran {
      get { return tran_; }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_pose_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> pose_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///[72]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Pose {
      get { return pose_; }
    }

    /// <summary>Field number for the "jointPosition" field.</summary>
    public const int JointPositionFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_jointPosition_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> jointPosition_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///[72]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> JointPosition {
      get { return jointPosition_; }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 5;
    private float cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "winnerThreadIndex" field.</summary>
    public const int WinnerThreadIndexFieldNumber = 6;
    private int winnerThreadIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinnerThreadIndex {
      get { return winnerThreadIndex_; }
      set {
        winnerThreadIndex_ = value;
      }
    }

    /// <summary>Field number for the "poseCompact" field.</summary>
    public const int PoseCompactFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_poseCompact_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> poseCompact_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///[37]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PoseCompact {
      get { return poseCompact_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KTime != other.KTime) return false;
      if(!tran_.Equals(other.tran_)) return false;
      if(!pose_.Equals(other.pose_)) return false;
      if(!jointPosition_.Equals(other.jointPosition_)) return false;
      if (Cost != other.Cost) return false;
      if (WinnerThreadIndex != other.WinnerThreadIndex) return false;
      if(!poseCompact_.Equals(other.poseCompact_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KTime != 0D) hash ^= KTime.GetHashCode();
      hash ^= tran_.GetHashCode();
      hash ^= pose_.GetHashCode();
      hash ^= jointPosition_.GetHashCode();
      if (Cost != 0F) hash ^= Cost.GetHashCode();
      if (WinnerThreadIndex != 0) hash ^= WinnerThreadIndex.GetHashCode();
      hash ^= poseCompact_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(KTime);
      }
      tran_.WriteTo(output, _repeated_tran_codec);
      pose_.WriteTo(output, _repeated_pose_codec);
      jointPosition_.WriteTo(output, _repeated_jointPosition_codec);
      if (Cost != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Cost);
      }
      if (WinnerThreadIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WinnerThreadIndex);
      }
      poseCompact_.WriteTo(output, _repeated_poseCompact_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KTime != 0D) {
        size += 1 + 8;
      }
      size += tran_.CalculateSize(_repeated_tran_codec);
      size += pose_.CalculateSize(_repeated_pose_codec);
      size += jointPosition_.CalculateSize(_repeated_jointPosition_codec);
      if (Cost != 0F) {
        size += 1 + 4;
      }
      if (WinnerThreadIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinnerThreadIndex);
      }
      size += poseCompact_.CalculateSize(_repeated_poseCompact_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameProto other) {
      if (other == null) {
        return;
      }
      if (other.KTime != 0D) {
        KTime = other.KTime;
      }
      tran_.Add(other.tran_);
      pose_.Add(other.pose_);
      jointPosition_.Add(other.jointPosition_);
      if (other.Cost != 0F) {
        Cost = other.Cost;
      }
      if (other.WinnerThreadIndex != 0) {
        WinnerThreadIndex = other.WinnerThreadIndex;
      }
      poseCompact_.Add(other.poseCompact_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            KTime = input.ReadDouble();
            break;
          }
          case 18:
          case 21: {
            tran_.AddEntriesFrom(input, _repeated_tran_codec);
            break;
          }
          case 26:
          case 29: {
            pose_.AddEntriesFrom(input, _repeated_pose_codec);
            break;
          }
          case 34:
          case 37: {
            jointPosition_.AddEntriesFrom(input, _repeated_jointPosition_codec);
            break;
          }
          case 45: {
            Cost = input.ReadFloat();
            break;
          }
          case 48: {
            WinnerThreadIndex = input.ReadInt32();
            break;
          }
          case 58:
          case 61: {
            poseCompact_.AddEntriesFrom(input, _repeated_poseCompact_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SessionProto : pb::IMessage<SessionProto> {
    private static readonly pb::MessageParser<SessionProto> _parser = new pb::MessageParser<SessionProto>(() => new SessionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SessionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.PoseFitting.PoseFittingResultReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionProto(SessionProto other) : this() {
      beta_ = other.beta_.Clone();
      frames_ = other.frames_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SessionProto Clone() {
      return new SessionProto(this);
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_beta_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> beta_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Beta {
      get { return beta_; }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Protobuf.PoseFitting.FrameProto> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Protobuf.PoseFitting.FrameProto.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.PoseFitting.FrameProto> frames_ = new pbc::RepeatedField<global::Google.Protobuf.PoseFitting.FrameProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.PoseFitting.FrameProto> Frames {
      get { return frames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SessionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SessionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!beta_.Equals(other.beta_)) return false;
      if(!frames_.Equals(other.frames_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= beta_.GetHashCode();
      hash ^= frames_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      beta_.WriteTo(output, _repeated_beta_codec);
      frames_.WriteTo(output, _repeated_frames_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += beta_.CalculateSize(_repeated_beta_codec);
      size += frames_.CalculateSize(_repeated_frames_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SessionProto other) {
      if (other == null) {
        return;
      }
      beta_.Add(other.beta_);
      frames_.Add(other.frames_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            beta_.AddEntriesFrom(input, _repeated_beta_codec);
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
