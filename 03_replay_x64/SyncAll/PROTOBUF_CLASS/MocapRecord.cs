// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MocapRecord.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Protobuf.MocapRecord {

  /// <summary>Holder for reflection information generated from MocapRecord.proto</summary>
  public static partial class MocapRecordReflection {

    #region Descriptor
    /// <summary>File descriptor for MocapRecord.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MocapRecordReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFNb2NhcFJlY29yZC5wcm90bxILbW9jYXBSZWNvcmQixQIKDFNldHRpbmdQ",
            "cm90bxIOCgZiYXNlSUQYASABKA0SDgoGbGVmdElEGAIgASgNEg8KB3JpZ2h0",
            "SUQYAyABKA0SFwoPYm9keUluZGV4QnVmZmVyGAQgASgIEhMKC2RlcHRoQnVm",
            "ZmVyGAUgASgIEkEKCWNvbG9yTW9kZRgGIAEoDjIuLm1vY2FwUmVjb3JkLlNl",
            "dHRpbmdQcm90by5Db2xvclJlY29yZE1vZGVQcm90bxIOCgZpck1vZGUYByAB",
            "KAgSHQoVbW9iaWxlSW11U2FtcGxpbmdSYXRlGAggASgFImQKFENvbG9yUmVj",
            "b3JkTW9kZVByb3RvEggKBG5vbmUQABIICgR5dXYyEAESEQoNZ3JheXNjYWxl",
            "XzFfMRACEhEKDWdyYXlzY2FsZV8xXzQQAxISCg5ncmF5c2NhbGVfMV8xNhAE",
            "IjAKDVJhd1Nob3J0UHJvdG8SCQoBeBgBIAEoERIJCgF5GAIgASgREgkKAXoY",
            "AyABKBEiPQoPUXVhdGVybmlvblByb3RvEgkKAXcYASABKAISCQoBeBgCIAEo",
            "AhIJCgF5GAMgASgCEgkKAXoYBCABKAIiLwoMVmVjdG9yM1Byb3RvEgkKAXgY",
            "ASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIsQDCg5SYXdTYW1wbGVQcm90",
            "bxITCgtibG9ja051bWJlchgQIAEoDRIQCghkZXZpY2VJRBgBIAEoDRIRCgl0",
            "aW1lc3RhbXAYAiABKA0SMQoLb3JpZW50YXRpb24YAyABKAsyHC5tb2NhcFJl",
            "Y29yZC5RdWF0ZXJuaW9uUHJvdG8SEwoLZm9yZWFybVRpbHQYBCABKAISEAoI",
            "cHJlc3N1cmUYBSABKAUSEgoKY2FwVG91Y2hVcBgGIAEoDRIUCgxjYXBUb3Vj",
            "aERvd24YByABKA0SJwoDYWNjGAggASgLMhoubW9jYXBSZWNvcmQuUmF3U2hv",
            "cnRQcm90bxIoCgRneXJvGAkgASgLMhoubW9jYXBSZWNvcmQuUmF3U2hvcnRQ",
            "cm90bxInCgNtYWcYCiABKAsyGi5tb2NhcFJlY29yZC5SYXdTaG9ydFByb3Rv",
            "Eg4KBmJ1dHRvbhgLIAEoDRIPCgdiYXR0ZXJ5GAwgASgNEgwKBHdvcm4YDSAB",
            "KA0SDQoFYnRpbWUYDiABKAESDQoFa3RpbWUYDyABKAESKwoIZ3lyb0JpYXMY",
            "ESABKAsyGS5tb2NhcFJlY29yZC5WZWN0b3IzUHJvdG8iPwoSUmF3U2FtcGxl",
            "TGlzdFByb3RvEikKBGxpc3QYASADKAsyGy5tb2NhcFJlY29yZC5SYXdTYW1w",
            "bGVQcm90b0IeqgIbR29vZ2xlLlByb3RvYnVmLk1vY2FwUmVjb3JkYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.MocapRecord.SettingProto), global::Google.Protobuf.MocapRecord.SettingProto.Parser, new[]{ "BaseID", "LeftID", "RightID", "BodyIndexBuffer", "DepthBuffer", "ColorMode", "IrMode", "MobileImuSamplingRate" }, null, new[]{ typeof(global::Google.Protobuf.MocapRecord.SettingProto.Types.ColorRecordModeProto) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.MocapRecord.RawShortProto), global::Google.Protobuf.MocapRecord.RawShortProto.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.MocapRecord.QuaternionProto), global::Google.Protobuf.MocapRecord.QuaternionProto.Parser, new[]{ "W", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.MocapRecord.Vector3Proto), global::Google.Protobuf.MocapRecord.Vector3Proto.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.MocapRecord.RawSampleProto), global::Google.Protobuf.MocapRecord.RawSampleProto.Parser, new[]{ "BlockNumber", "DeviceID", "Timestamp", "Orientation", "ForearmTilt", "Pressure", "CapTouchUp", "CapTouchDown", "Acc", "Gyro", "Mag", "Button", "Battery", "Worn", "Btime", "Ktime", "GyroBias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Protobuf.MocapRecord.RawSampleListProto), global::Google.Protobuf.MocapRecord.RawSampleListProto.Parser, new[]{ "List" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SettingProto : pb::IMessage<SettingProto> {
    private static readonly pb::MessageParser<SettingProto> _parser = new pb::MessageParser<SettingProto>(() => new SettingProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MocapRecord.MocapRecordReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingProto(SettingProto other) : this() {
      baseID_ = other.baseID_;
      leftID_ = other.leftID_;
      rightID_ = other.rightID_;
      bodyIndexBuffer_ = other.bodyIndexBuffer_;
      depthBuffer_ = other.depthBuffer_;
      colorMode_ = other.colorMode_;
      irMode_ = other.irMode_;
      mobileImuSamplingRate_ = other.mobileImuSamplingRate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingProto Clone() {
      return new SettingProto(this);
    }

    /// <summary>Field number for the "baseID" field.</summary>
    public const int BaseIDFieldNumber = 1;
    private uint baseID_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseID {
      get { return baseID_; }
      set {
        baseID_ = value;
      }
    }

    /// <summary>Field number for the "leftID" field.</summary>
    public const int LeftIDFieldNumber = 2;
    private uint leftID_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeftID {
      get { return leftID_; }
      set {
        leftID_ = value;
      }
    }

    /// <summary>Field number for the "rightID" field.</summary>
    public const int RightIDFieldNumber = 3;
    private uint rightID_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RightID {
      get { return rightID_; }
      set {
        rightID_ = value;
      }
    }

    /// <summary>Field number for the "bodyIndexBuffer" field.</summary>
    public const int BodyIndexBufferFieldNumber = 4;
    private bool bodyIndexBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BodyIndexBuffer {
      get { return bodyIndexBuffer_; }
      set {
        bodyIndexBuffer_ = value;
      }
    }

    /// <summary>Field number for the "depthBuffer" field.</summary>
    public const int DepthBufferFieldNumber = 5;
    private bool depthBuffer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DepthBuffer {
      get { return depthBuffer_; }
      set {
        depthBuffer_ = value;
      }
    }

    /// <summary>Field number for the "colorMode" field.</summary>
    public const int ColorModeFieldNumber = 6;
    private global::Google.Protobuf.MocapRecord.SettingProto.Types.ColorRecordModeProto colorMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.MocapRecord.SettingProto.Types.ColorRecordModeProto ColorMode {
      get { return colorMode_; }
      set {
        colorMode_ = value;
      }
    }

    /// <summary>Field number for the "irMode" field.</summary>
    public const int IrModeFieldNumber = 7;
    private bool irMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IrMode {
      get { return irMode_; }
      set {
        irMode_ = value;
      }
    }

    /// <summary>Field number for the "mobileImuSamplingRate" field.</summary>
    public const int MobileImuSamplingRateFieldNumber = 8;
    private int mobileImuSamplingRate_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MobileImuSamplingRate {
      get { return mobileImuSamplingRate_; }
      set {
        mobileImuSamplingRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseID != other.BaseID) return false;
      if (LeftID != other.LeftID) return false;
      if (RightID != other.RightID) return false;
      if (BodyIndexBuffer != other.BodyIndexBuffer) return false;
      if (DepthBuffer != other.DepthBuffer) return false;
      if (ColorMode != other.ColorMode) return false;
      if (IrMode != other.IrMode) return false;
      if (MobileImuSamplingRate != other.MobileImuSamplingRate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseID != 0) hash ^= BaseID.GetHashCode();
      if (LeftID != 0) hash ^= LeftID.GetHashCode();
      if (RightID != 0) hash ^= RightID.GetHashCode();
      if (BodyIndexBuffer != false) hash ^= BodyIndexBuffer.GetHashCode();
      if (DepthBuffer != false) hash ^= DepthBuffer.GetHashCode();
      if (ColorMode != 0) hash ^= ColorMode.GetHashCode();
      if (IrMode != false) hash ^= IrMode.GetHashCode();
      if (MobileImuSamplingRate != 0) hash ^= MobileImuSamplingRate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BaseID);
      }
      if (LeftID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LeftID);
      }
      if (RightID != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RightID);
      }
      if (BodyIndexBuffer != false) {
        output.WriteRawTag(32);
        output.WriteBool(BodyIndexBuffer);
      }
      if (DepthBuffer != false) {
        output.WriteRawTag(40);
        output.WriteBool(DepthBuffer);
      }
      if (ColorMode != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ColorMode);
      }
      if (IrMode != false) {
        output.WriteRawTag(56);
        output.WriteBool(IrMode);
      }
      if (MobileImuSamplingRate != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MobileImuSamplingRate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseID);
      }
      if (LeftID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeftID);
      }
      if (RightID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RightID);
      }
      if (BodyIndexBuffer != false) {
        size += 1 + 1;
      }
      if (DepthBuffer != false) {
        size += 1 + 1;
      }
      if (ColorMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ColorMode);
      }
      if (IrMode != false) {
        size += 1 + 1;
      }
      if (MobileImuSamplingRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MobileImuSamplingRate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingProto other) {
      if (other == null) {
        return;
      }
      if (other.BaseID != 0) {
        BaseID = other.BaseID;
      }
      if (other.LeftID != 0) {
        LeftID = other.LeftID;
      }
      if (other.RightID != 0) {
        RightID = other.RightID;
      }
      if (other.BodyIndexBuffer != false) {
        BodyIndexBuffer = other.BodyIndexBuffer;
      }
      if (other.DepthBuffer != false) {
        DepthBuffer = other.DepthBuffer;
      }
      if (other.ColorMode != 0) {
        ColorMode = other.ColorMode;
      }
      if (other.IrMode != false) {
        IrMode = other.IrMode;
      }
      if (other.MobileImuSamplingRate != 0) {
        MobileImuSamplingRate = other.MobileImuSamplingRate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BaseID = input.ReadUInt32();
            break;
          }
          case 16: {
            LeftID = input.ReadUInt32();
            break;
          }
          case 24: {
            RightID = input.ReadUInt32();
            break;
          }
          case 32: {
            BodyIndexBuffer = input.ReadBool();
            break;
          }
          case 40: {
            DepthBuffer = input.ReadBool();
            break;
          }
          case 48: {
            colorMode_ = (global::Google.Protobuf.MocapRecord.SettingProto.Types.ColorRecordModeProto) input.ReadEnum();
            break;
          }
          case 56: {
            IrMode = input.ReadBool();
            break;
          }
          case 64: {
            MobileImuSamplingRate = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SettingProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ColorRecordModeProto {
        [pbr::OriginalName("none")] None = 0,
        [pbr::OriginalName("yuv2")] Yuv2 = 1,
        [pbr::OriginalName("grayscale_1_1")] Grayscale11 = 2,
        [pbr::OriginalName("grayscale_1_4")] Grayscale14 = 3,
        [pbr::OriginalName("grayscale_1_16")] Grayscale116 = 4,
      }

    }
    #endregion

  }

  public sealed partial class RawShortProto : pb::IMessage<RawShortProto> {
    private static readonly pb::MessageParser<RawShortProto> _parser = new pb::MessageParser<RawShortProto>(() => new RawShortProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawShortProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MocapRecord.MocapRecordReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawShortProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawShortProto(RawShortProto other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawShortProto Clone() {
      return new RawShortProto(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    ///short
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    ///short
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    /// <summary>
    ///short
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawShortProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawShortProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawShortProto other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadSInt32();
            break;
          }
          case 16: {
            Y = input.ReadSInt32();
            break;
          }
          case 24: {
            Z = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuaternionProto : pb::IMessage<QuaternionProto> {
    private static readonly pb::MessageParser<QuaternionProto> _parser = new pb::MessageParser<QuaternionProto>(() => new QuaternionProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuaternionProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MocapRecord.MocapRecordReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuaternionProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuaternionProto(QuaternionProto other) : this() {
      w_ = other.w_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuaternionProto Clone() {
      return new QuaternionProto(this);
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 1;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuaternionProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuaternionProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (W != other.W) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (W != 0F) hash ^= W.GetHashCode();
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (W != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(W);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (W != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuaternionProto other) {
      if (other == null) {
        return;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            W = input.ReadFloat();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vector3Proto : pb::IMessage<Vector3Proto> {
    private static readonly pb::MessageParser<Vector3Proto> _parser = new pb::MessageParser<Vector3Proto>(() => new Vector3Proto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Proto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MocapRecord.MocapRecordReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto(Vector3Proto other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3Proto Clone() {
      return new Vector3Proto(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3Proto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3Proto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3Proto other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawSampleProto : pb::IMessage<RawSampleProto> {
    private static readonly pb::MessageParser<RawSampleProto> _parser = new pb::MessageParser<RawSampleProto>(() => new RawSampleProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawSampleProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MocapRecord.MocapRecordReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawSampleProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawSampleProto(RawSampleProto other) : this() {
      blockNumber_ = other.blockNumber_;
      deviceID_ = other.deviceID_;
      timestamp_ = other.timestamp_;
      Orientation = other.orientation_ != null ? other.Orientation.Clone() : null;
      forearmTilt_ = other.forearmTilt_;
      pressure_ = other.pressure_;
      capTouchUp_ = other.capTouchUp_;
      capTouchDown_ = other.capTouchDown_;
      Acc = other.acc_ != null ? other.Acc.Clone() : null;
      Gyro = other.gyro_ != null ? other.Gyro.Clone() : null;
      Mag = other.mag_ != null ? other.Mag.Clone() : null;
      button_ = other.button_;
      battery_ = other.battery_;
      worn_ = other.worn_;
      btime_ = other.btime_;
      ktime_ = other.ktime_;
      GyroBias = other.gyroBias_ != null ? other.GyroBias.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawSampleProto Clone() {
      return new RawSampleProto(this);
    }

    /// <summary>Field number for the "blockNumber" field.</summary>
    public const int BlockNumberFieldNumber = 16;
    private uint blockNumber_;
    /// <summary>
    ///byte 0-99
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private uint deviceID_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    /// <summary>
    ///uint32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "orientation" field.</summary>
    public const int OrientationFieldNumber = 3;
    private global::Google.Protobuf.MocapRecord.QuaternionProto orientation_;
    /// <summary>
    ///calculated during record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.MocapRecord.QuaternionProto Orientation {
      get { return orientation_; }
      set {
        orientation_ = value;
      }
    }

    /// <summary>Field number for the "forearmTilt" field.</summary>
    public const int ForearmTiltFieldNumber = 4;
    private float forearmTilt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ForearmTilt {
      get { return forearmTilt_; }
      set {
        forearmTilt_ = value;
      }
    }

    /// <summary>Field number for the "pressure" field.</summary>
    public const int PressureFieldNumber = 5;
    private int pressure_;
    /// <summary>
    ///int32
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pressure {
      get { return pressure_; }
      set {
        pressure_ = value;
      }
    }

    /// <summary>Field number for the "capTouchUp" field.</summary>
    public const int CapTouchUpFieldNumber = 6;
    private uint capTouchUp_;
    /// <summary>
    ///uint16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CapTouchUp {
      get { return capTouchUp_; }
      set {
        capTouchUp_ = value;
      }
    }

    /// <summary>Field number for the "capTouchDown" field.</summary>
    public const int CapTouchDownFieldNumber = 7;
    private uint capTouchDown_;
    /// <summary>
    ///uint16
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CapTouchDown {
      get { return capTouchDown_; }
      set {
        capTouchDown_ = value;
      }
    }

    /// <summary>Field number for the "acc" field.</summary>
    public const int AccFieldNumber = 8;
    private global::Google.Protobuf.MocapRecord.RawShortProto acc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.MocapRecord.RawShortProto Acc {
      get { return acc_; }
      set {
        acc_ = value;
      }
    }

    /// <summary>Field number for the "gyro" field.</summary>
    public const int GyroFieldNumber = 9;
    private global::Google.Protobuf.MocapRecord.RawShortProto gyro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.MocapRecord.RawShortProto Gyro {
      get { return gyro_; }
      set {
        gyro_ = value;
      }
    }

    /// <summary>Field number for the "mag" field.</summary>
    public const int MagFieldNumber = 10;
    private global::Google.Protobuf.MocapRecord.RawShortProto mag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.MocapRecord.RawShortProto Mag {
      get { return mag_; }
      set {
        mag_ = value;
      }
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 11;
    private uint button_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 12;
    private uint battery_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "worn" field.</summary>
    public const int WornFieldNumber = 13;
    private uint worn_;
    /// <summary>
    ///byte
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Worn {
      get { return worn_; }
      set {
        worn_ = value;
      }
    }

    /// <summary>Field number for the "btime" field.</summary>
    public const int BtimeFieldNumber = 14;
    private double btime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Btime {
      get { return btime_; }
      set {
        btime_ = value;
      }
    }

    /// <summary>Field number for the "ktime" field.</summary>
    public const int KtimeFieldNumber = 15;
    private double ktime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Ktime {
      get { return ktime_; }
      set {
        ktime_ = value;
      }
    }

    /// <summary>Field number for the "gyroBias" field.</summary>
    public const int GyroBiasFieldNumber = 17;
    private global::Google.Protobuf.MocapRecord.Vector3Proto gyroBias_;
    /// <summary>
    ///calculated during record
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.MocapRecord.Vector3Proto GyroBias {
      get { return gyroBias_; }
      set {
        gyroBias_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawSampleProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawSampleProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockNumber != other.BlockNumber) return false;
      if (DeviceID != other.DeviceID) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Orientation, other.Orientation)) return false;
      if (ForearmTilt != other.ForearmTilt) return false;
      if (Pressure != other.Pressure) return false;
      if (CapTouchUp != other.CapTouchUp) return false;
      if (CapTouchDown != other.CapTouchDown) return false;
      if (!object.Equals(Acc, other.Acc)) return false;
      if (!object.Equals(Gyro, other.Gyro)) return false;
      if (!object.Equals(Mag, other.Mag)) return false;
      if (Button != other.Button) return false;
      if (Battery != other.Battery) return false;
      if (Worn != other.Worn) return false;
      if (Btime != other.Btime) return false;
      if (Ktime != other.Ktime) return false;
      if (!object.Equals(GyroBias, other.GyroBias)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockNumber != 0) hash ^= BlockNumber.GetHashCode();
      if (DeviceID != 0) hash ^= DeviceID.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (orientation_ != null) hash ^= Orientation.GetHashCode();
      if (ForearmTilt != 0F) hash ^= ForearmTilt.GetHashCode();
      if (Pressure != 0) hash ^= Pressure.GetHashCode();
      if (CapTouchUp != 0) hash ^= CapTouchUp.GetHashCode();
      if (CapTouchDown != 0) hash ^= CapTouchDown.GetHashCode();
      if (acc_ != null) hash ^= Acc.GetHashCode();
      if (gyro_ != null) hash ^= Gyro.GetHashCode();
      if (mag_ != null) hash ^= Mag.GetHashCode();
      if (Button != 0) hash ^= Button.GetHashCode();
      if (Battery != 0) hash ^= Battery.GetHashCode();
      if (Worn != 0) hash ^= Worn.GetHashCode();
      if (Btime != 0D) hash ^= Btime.GetHashCode();
      if (Ktime != 0D) hash ^= Ktime.GetHashCode();
      if (gyroBias_ != null) hash ^= GyroBias.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DeviceID);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
      if (orientation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Orientation);
      }
      if (ForearmTilt != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ForearmTilt);
      }
      if (Pressure != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Pressure);
      }
      if (CapTouchUp != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CapTouchUp);
      }
      if (CapTouchDown != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CapTouchDown);
      }
      if (acc_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Acc);
      }
      if (gyro_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Gyro);
      }
      if (mag_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Mag);
      }
      if (Button != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Button);
      }
      if (Battery != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(Battery);
      }
      if (Worn != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Worn);
      }
      if (Btime != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(Btime);
      }
      if (Ktime != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Ktime);
      }
      if (BlockNumber != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(BlockNumber);
      }
      if (gyroBias_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(GyroBias);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BlockNumber);
      }
      if (DeviceID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceID);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (orientation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
      }
      if (ForearmTilt != 0F) {
        size += 1 + 4;
      }
      if (Pressure != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pressure);
      }
      if (CapTouchUp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CapTouchUp);
      }
      if (CapTouchDown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CapTouchDown);
      }
      if (acc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acc);
      }
      if (gyro_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gyro);
      }
      if (mag_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mag);
      }
      if (Button != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Button);
      }
      if (Battery != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Battery);
      }
      if (Worn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Worn);
      }
      if (Btime != 0D) {
        size += 1 + 8;
      }
      if (Ktime != 0D) {
        size += 1 + 8;
      }
      if (gyroBias_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GyroBias);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawSampleProto other) {
      if (other == null) {
        return;
      }
      if (other.BlockNumber != 0) {
        BlockNumber = other.BlockNumber;
      }
      if (other.DeviceID != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.orientation_ != null) {
        if (orientation_ == null) {
          orientation_ = new global::Google.Protobuf.MocapRecord.QuaternionProto();
        }
        Orientation.MergeFrom(other.Orientation);
      }
      if (other.ForearmTilt != 0F) {
        ForearmTilt = other.ForearmTilt;
      }
      if (other.Pressure != 0) {
        Pressure = other.Pressure;
      }
      if (other.CapTouchUp != 0) {
        CapTouchUp = other.CapTouchUp;
      }
      if (other.CapTouchDown != 0) {
        CapTouchDown = other.CapTouchDown;
      }
      if (other.acc_ != null) {
        if (acc_ == null) {
          acc_ = new global::Google.Protobuf.MocapRecord.RawShortProto();
        }
        Acc.MergeFrom(other.Acc);
      }
      if (other.gyro_ != null) {
        if (gyro_ == null) {
          gyro_ = new global::Google.Protobuf.MocapRecord.RawShortProto();
        }
        Gyro.MergeFrom(other.Gyro);
      }
      if (other.mag_ != null) {
        if (mag_ == null) {
          mag_ = new global::Google.Protobuf.MocapRecord.RawShortProto();
        }
        Mag.MergeFrom(other.Mag);
      }
      if (other.Button != 0) {
        Button = other.Button;
      }
      if (other.Battery != 0) {
        Battery = other.Battery;
      }
      if (other.Worn != 0) {
        Worn = other.Worn;
      }
      if (other.Btime != 0D) {
        Btime = other.Btime;
      }
      if (other.Ktime != 0D) {
        Ktime = other.Ktime;
      }
      if (other.gyroBias_ != null) {
        if (gyroBias_ == null) {
          gyroBias_ = new global::Google.Protobuf.MocapRecord.Vector3Proto();
        }
        GyroBias.MergeFrom(other.GyroBias);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeviceID = input.ReadUInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 26: {
            if (orientation_ == null) {
              orientation_ = new global::Google.Protobuf.MocapRecord.QuaternionProto();
            }
            input.ReadMessage(orientation_);
            break;
          }
          case 37: {
            ForearmTilt = input.ReadFloat();
            break;
          }
          case 40: {
            Pressure = input.ReadInt32();
            break;
          }
          case 48: {
            CapTouchUp = input.ReadUInt32();
            break;
          }
          case 56: {
            CapTouchDown = input.ReadUInt32();
            break;
          }
          case 66: {
            if (acc_ == null) {
              acc_ = new global::Google.Protobuf.MocapRecord.RawShortProto();
            }
            input.ReadMessage(acc_);
            break;
          }
          case 74: {
            if (gyro_ == null) {
              gyro_ = new global::Google.Protobuf.MocapRecord.RawShortProto();
            }
            input.ReadMessage(gyro_);
            break;
          }
          case 82: {
            if (mag_ == null) {
              mag_ = new global::Google.Protobuf.MocapRecord.RawShortProto();
            }
            input.ReadMessage(mag_);
            break;
          }
          case 88: {
            Button = input.ReadUInt32();
            break;
          }
          case 96: {
            Battery = input.ReadUInt32();
            break;
          }
          case 104: {
            Worn = input.ReadUInt32();
            break;
          }
          case 113: {
            Btime = input.ReadDouble();
            break;
          }
          case 121: {
            Ktime = input.ReadDouble();
            break;
          }
          case 128: {
            BlockNumber = input.ReadUInt32();
            break;
          }
          case 138: {
            if (gyroBias_ == null) {
              gyroBias_ = new global::Google.Protobuf.MocapRecord.Vector3Proto();
            }
            input.ReadMessage(gyroBias_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawSampleListProto : pb::IMessage<RawSampleListProto> {
    private static readonly pb::MessageParser<RawSampleListProto> _parser = new pb::MessageParser<RawSampleListProto>(() => new RawSampleListProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawSampleListProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Protobuf.MocapRecord.MocapRecordReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawSampleListProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawSampleListProto(RawSampleListProto other) : this() {
      list_ = other.list_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawSampleListProto Clone() {
      return new RawSampleListProto(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Protobuf.MocapRecord.RawSampleProto> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Protobuf.MocapRecord.RawSampleProto.Parser);
    private readonly pbc::RepeatedField<global::Google.Protobuf.MocapRecord.RawSampleProto> list_ = new pbc::RepeatedField<global::Google.Protobuf.MocapRecord.RawSampleProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Google.Protobuf.MocapRecord.RawSampleProto> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawSampleListProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawSampleListProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawSampleListProto other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
